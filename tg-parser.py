import requests
import threading
import json
import os
import time
import random
import re
import urllib.parse as urllib_parse
from bs4 import BeautifulSoup
from datetime import datetime, timedelta, timezone
import logging
import asyncio
import ip2location
import asyncio.exceptions
import zipfile
from typing import Dict

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
requests.post = lambda url, **kwargs: requests.request(
    method="POST", url=url, verify=False, **kwargs
)
requests.get = lambda url, **kwargs: requests.request(
    method="GET", url=url, verify=False, **kwargs
)

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MAX_THREADS_PARSING = 50
REQUEST_TIMEOUT = 10
MIN_PROFILES_TO_DOWNLOAD = 20
MAX_PROFILES_TO_DOWNLOAD = 4000
ALLOWED_PROTOCOLS = {"vless", "hy2", "tuic", "trojan"}
PROFILE_SCORE_WEIGHTS = {
    "security": 2,
    "sni": 2,
    "alpn": 2,
    "flow": 2,
    "headerType": 1,
    "path": 1,
    "obfs": 1,
    "mport": 1,
}
MAX_FAILED_CHECKS = 4 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
FAILURE_HISTORY_FILE = 'channel_failure_history.json' # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—É–¥–∞—á
NO_MORE_PAGES_HISTORY_FILE = 'no_more_pages_history.json' # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ "–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
MAX_NO_MORE_PAGES_COUNT = 4 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
PROFILE_FRESHNESS_DAYS = 7 # –ü–µ—Ä–∏–æ–¥ —Å–≤–µ–∂–µ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –¥–Ω—è—Ö (–æ—Ç –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞)

IP2LOCATION_DB_URL = "https://download.ip2location.com/lite/IP2LOCATION-LITE-DB1.BIN.ZIP" # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è IP2Location LITE DB1
IP2LOCATION_DB_PATH = "IP2LOCATION-LITE-DB1.BIN" # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IP2Location
COUNTRY_CODE_TO_FLAG_EMOJI: Dict[str, str] = { # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω –∏ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–æ–≤ (ISO 3166-1 alpha-2)
    "US": "üá∫üá∏", "DE": "üá©üá™", "GB": "üá¨üáß", "FR": "üá´üá∑", "JP": "üáØüáµ",
    "CN": "üá®üá≥", "RU": "üá∑üá∫", "KR": "üá∞üá∑", "SG": "üá∏üá¨", "CA": "üá®üá¶",
    "AU": "üá¶üá∫", "IN": "üáÆüá≥", "BR": "üáßüá∑", "CH": "üá®üá≠", "SE": "üá∏üá™",
    "NL": "üá≥üá±", "ES": "üá™üá∏", "IT": "üáÆüáπ", "BE": "üáßüá™", "HK": "üá≠üá∞",
    "TR": "üáπüá∑", "UA": "üá∫üá¶", "VN": "üáªüá≥", "PL": "üáµüá±", "AR": "üá¶üá∑",
    "MX": "üá≤üáΩ", "ID": "üáÆüá©", "MY": "üá≤üáæ", "PH": "üáµüá≠", "TH": "üáπüá≠",
    "ZA": "üáøüá¶", "AE": "üá¶üá™", "PT": "üáµüáπ", "IE": "üáÆüá™", "CL": "üá®üá±",
    "CO": "üá®üá¥", "SA": "üá∏üá¶", "NZ": "üá≥üáø", "CZ": "üá®üáø", "GR": "üá¨üá∑",
    "RO": "üá∑üá¥", "IL": "üáÆüá±", "EG": "üá™üá¨", "NG": "üá≥üá¨", "KE": "üá∞üá™",
    "PK": "üáµüá∞", "BD": "üáßüá©", "LK": "üá±üá∞", "IR": "üáÆüá∑", "IQ": "üáÆüá∂",
    "SY": "üá∏üáæ", "JO": "üáØüá¥", "KW": "üá∞üáº", "QA": "üá∂üá¶", "BH": "üáßüá≠",
    "OM": "üá¥üá≤", "LB": "üá±üáß", "CY": "üá®üáæ", "GLOBAL": "üåê", "UNKNOWN": "ü§î" # Default flags
}
DEFAULT_FLAG_EMOJI = COUNTRY_CODE_TO_FLAG_EMOJI["GLOBAL"] # Emoji for unknown country
UNKNOWN_FLAG_EMOJI = COUNTRY_CODE_TO_FLAG_EMOJI["UNKNOWN"] # Emoji for when country can't be determined

# --- –ö–æ–Ω–µ—Ü –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç ---

if not os.path.exists('config-tg.txt'):
    with open('config-tg.txt', 'w'): pass

def json_load(path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict –∏–ª–∏ list –∏–ª–∏ None: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞.
                                None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
                                –õ–æ–≥–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏.
    """
    if not os.path.exists(path):
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return None

    try:
        with open(path, 'r', encoding="utf-8") as file:
            data = json.load(file)
            if not isinstance(data, (dict, list)):
                logging.error(f"–§–∞–π–ª {path} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON –æ–±—ä–µ–∫—Ç –∏–ª–∏ –º–∞—Å—Å–∏–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ–º None.")
                return None
            return data
    except json.JSONDecodeError:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ: {path}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º None.")
        return None

def json_save(data, path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª."""
    try:
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON –≤ —Ñ–∞–π–ª {path}: {e}")
        return False

def substring_del(string_list):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫.

    –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –∫–∞–∫–æ–π-–ª–∏–±–æ –¥—Ä—É–≥–æ–π,
    –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–æ–º –∂–µ —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ –¥–∞, —Ç–æ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è
    –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –∏ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.

    –ü—Ä–∏–º–µ—Ä:
    ['abc', 'abcd', 'def', 'ghi'] -> ['abcd', 'def', 'ghi']  ('abc' —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π 'abcd')

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω—ã –ø–æ–¥—Å—Ç—Ä–æ–∫–∏.
    """
    string_list.sort(key=len)

    strings_to_remove = set()

    for i in range(len(string_list)):
        for j in range(i + 1, len(string_list)):
            if string_list[i] in string_list[j]:
                strings_to_remove.add(string_list[i])
                break

    return [s for s in string_list if s not in strings_to_remove]

def calculate_profile_score(profile):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    –°–∫–æ—Ä —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    –≤ —Å—Ç—Ä–æ–∫–µ –ø—Ä–æ—Ñ–∏–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –≤–µ—Å–∞ –∏–∑ PROFILE_SCORE_WEIGHTS.
    –ü—Ä–æ—Ç–æ–∫–æ–ª—ã, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ ALLOWED_PROTOCOLS, –ø–æ–ª—É—á–∞—é—Ç —Å–∫–æ—Ä 0.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        int: –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è.
    """
    protocol = profile.split("://")[0]
    if protocol not in ALLOWED_PROTOCOLS:
        return 0

    score = 0
    try:
        params_str = profile.split("://")[1]
        if "@" in params_str:
            params_str = params_str.split("@")[1]
        if "#" in params_str:
            params_str = params_str.split("#")[0]

        params = urllib_parse.parse_qs(params_str)

        def add_tls_score():
            nonlocal score
            if params.get("security", [""])[0] == "tls":
                score += PROFILE_SCORE_WEIGHTS.get("security", 0)
                score += PROFILE_SCORE_WEIGHTS.get("sni", 0) if "sni" in params else 0
                score += PROFILE_SCORE_WEIGHTS.get("alpn", 0) if "alpn" in params else 0

        if protocol == "vless":
            add_tls_score()
            score += PROFILE_SCORE_WEIGHTS.get("flow", 0) if "flow" in params else 0
            score += PROFILE_SCORE_WEIGHTS.get("headerType", 0) if "headerType" in params else 0
            score += PROFILE_SCORE_WEIGHTS.get("path", 0) if "path" in params else 0

        elif protocol == "hy2":
            add_tls_score()
            score += PROFILE_SCORE_WEIGHTS.get("obfs", 0) if "obfs" in params else 0

        elif protocol == "tuic":
            score += PROFILE_SCORE_WEIGHTS.get("alpn", 0) if "alpn" in params else 0
            score += PROFILE_SCORE_WEIGHTS.get("mport", 0) if "mport" in params else 0

        elif protocol == "trojan":
            add_tls_score()
            score += PROFILE_SCORE_WEIGHTS.get("obfs", 0) if "obfs" in params else 0

        base_params_count = len(profile.split("://")[1].split("@")[0].split(":"))
        score += base_params_count

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–∫–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è '{profile}': {e}")
        return 0

    return score

async def get_country_flag_emoji(ip_address: str, db_path: str) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ IP-–∞–¥—Ä–µ—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        ip_address: IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞.
        db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö IP2Location.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –≠–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ DEFAULT_FLAG_EMOJI, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    try:
        IP2LocObj = ip2location.IP2Location(db_path) # type: ignore

        def blocking_lookup(): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            try:
                rec = IP2LocObj.get_country_short(ip_address)
                if rec and rec != '??': # rec –º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ '??' –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    return rec
            except ip2location.IP2LocationError as e: # type: ignore
                logging.warning(f"–û—à–∏–±–∫–∞ IP2Location –¥–ª—è IP '{ip_address}': {e}")
            return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ '??'

        country_code = await asyncio.to_thread(blocking_lookup) # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤

        if country_code and country_code in COUNTRY_CODE_TO_FLAG_EMOJI:
            return COUNTRY_CODE_TO_FLAG_EMOJI[country_code]
        else:
            return DEFAULT_FLAG_EMOJI # –ò—Å–ø–æ–ª—å–∑—É–µ–º default flag –µ—Å–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ –∏–ª–∏ lookup –≤–µ—Ä–Ω—É–ª None

    except Exception as e: # –õ–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏, –≤–∫–ª—é—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –æ—à–∏–±–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —Ç.–¥.
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è IP '{ip_address}': {e}")
        return UNKNOWN_FLAG_EMOJI # –ò—Å–ø–æ–ª—å–∑—É–µ–º unknown flag emoji –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç. –æ—à–∏–±–∫–∏

async def process_channel(channel_url, parsed_profiles, thread_semaphore, telegram_channel_names, channels_parsed_count, channels_with_profiles, channel_failure_counts, channels_to_remove, no_more_pages_counts, ip2location_db_path):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π.

    –°–∫–∞—á–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞, –∏—â–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏,
    —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫.
    –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    –∏, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.
    –¢–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–∏ "–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        channel_url (str): URL –∫–∞–Ω–∞–ª–∞ Telegram (–±–µ–∑ 'https://t.me/s/').
        parsed_profiles (list): –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.
        thread_semaphore (threading.Semaphore): –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤.
        telegram_channel_names (list): –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤.
        channels_parsed_count (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è).
        channels_with_profiles (set): –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏.
        channel_failure_counts (dict): –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞–Ω–∞–ª–æ–≤.
        channels_to_remove (list): –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
        no_more_pages_counts (dict): –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ "–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤.
        ip2location_db_path (str): –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö IP2Location.
    """
    thread_semaphore.acquire()
    channel_removed_in_run = False # –§–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ channels_to_remove –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
    try:
        html_pages = []
        current_url = channel_url
        channel_profiles = []
        god_tg_name = False
        htmltag_pattern = re.compile(r'<.*?>')
        pattern_datbef = re.compile(r'(?:data-before=")(\d*)')
        no_more_pages_in_run = False # –§–ª–∞–≥, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å "–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ö–æ–¥–µ
        country_flag_emoji_tasks = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã

        for attempt in range(2):
            while True:
                try:
                    response = requests.get(f'https://t.me/s/{current_url}', timeout=REQUEST_TIMEOUT)
                    response.raise_for_status()
                    html_pages.append(response.text)
                    last_datbef = re.findall(pattern_datbef, response.text)
                    if not last_datbef:
                        logging.info(f"–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {channel_url}")
                        no_more_pages_in_run = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –Ω–µ—Ç
                        break
                    current_url = f'{channel_url}?before={last_datbef[0]}'
                    break
                except requests.Timeout:
                    log_message = f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {channel_url}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/2"
                    if attempt < 1:
                        log_message += ". –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5-15 —Å–µ–∫—É–Ω–¥."
                        time.sleep(random.randint(5, 15))
                    logging.warning(log_message)
                    if attempt >= 1:
                        logging.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (2) –¥–ª—è {channel_url} –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤.")
                        break
                except requests.RequestException as e:
                    log_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {channel_url}: {e}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/2"
                    if attempt < 1:
                        log_message += ". –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5-15 —Å–µ–∫—É–Ω–¥."
                        time.sleep(random.randint(5, 15))
                    logging.warning(log_message)
                    if attempt >= 1:
                        logging.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (2) –¥–ª—è {channel_url} –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–∞.")
                        break

        if not html_pages:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_url} –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª.")
            failed_check = True # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
        else:
            failed_check = False # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞—à–ª–æ—Å—å)


        channel_index = telegram_channel_names.index(channel_url) + 1
        logging.info(f'{channel_index} –∏–∑ {channels_parsed_count} - {channel_url}')

        if not failed_check: # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            for page in html_pages:
                soup = BeautifulSoup(page, 'html.parser')
                message_blocks = soup.find_all('div', class_='tgme_widget_message') # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                for message_block in message_blocks: # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –±–ª–æ–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
                    code_tags = message_block.find_all(class_='tgme_widget_message_text') # –ò—â–µ–º code_tags –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    time_tag = message_block.find('time', class_='datetime') # –ò—â–µ–º time_tag –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_datetime = None
                    if time_tag and 'datetime' in time_tag.attrs:
                        try:
                            message_datetime = datetime.fromisoformat(time_tag['datetime']).replace(tzinfo=timezone.utc) # –î–æ–±–∞–≤–ª—è–µ–º timezone awareness
                        except ValueError:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ time tag: {time_tag['datetime']}")

                    for code_tag in code_tags:
                        code_content_lines = str(code_tag).split('<br/>')
                        for line in code_content_lines:
                            cleaned_content = re.sub(htmltag_pattern, '', line).strip()
                            for protocol in ALLOWED_PROTOCOLS:
                                if f"{protocol}://" in cleaned_content:
                                    profile_link = cleaned_content
                                    score = calculate_profile_score(profile_link)
                                    host_match = re.search(r"@([\w\.\-]+):", profile_link) # Extract host before port
                                    ip_address = host_match.group(1) if host_match else None # Get IP address
                                    country_flag_emoji_task = asyncio.create_task(get_country_flag_emoji(ip_address, ip2location_db_path)) if ip_address else asyncio.Future() # Start async task, or create a dummy future if no IP
                                    if not ip_address:
                                        country_flag_emoji_task.set_result(DEFAULT_FLAG_EMOJI) # If no IP, set default emoji immediately
                                    country_flag_emoji_tasks.append(country_flag_emoji_task) # Add task to list
                                    channel_profiles.append({'profile': profile_link, 'score': score, 'date': message_datetime, 'country_flag_emoji_task': country_flag_emoji_task}) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É

                                    god_tg_name = True
                                    break

        if god_tg_name:
            channels_with_profiles.add(channel_url)
            channel_failure_counts[channel_url] = 0 # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ—É–¥–∞—á, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
            no_more_pages_counts[channel_url] = 0 # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ "–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
        else:
            if channel_url in channel_failure_counts:
                channel_failure_counts[channel_url] += 1
            else:
                channel_failure_counts[channel_url] = 1

            if channel_failure_counts[channel_url] >= MAX_FAILED_CHECKS and channel_url not in channels_to_remove:
                channels_to_remove.append(channel_url)
                channel_removed_in_run = True # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–µ
                logging.info(f"–ö–∞–Ω–∞–ª '{channel_url}' –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞ {MAX_FAILED_CHECKS} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.")
            elif not god_tg_name and not channel_removed_in_run: # –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–µ–≥–æ –ª–æ–≥–∞, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ —É–¥–∞–ª–µ–Ω –≤ —ç—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–µ
                logging.info(f"–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ {channel_url}. –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥: {channel_failure_counts[channel_url]}/{MAX_FAILED_CHECKS}.")
            elif channel_removed_in_run: # –õ–æ–≥ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω
                pass # –£–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤—ã—à–µ

        if no_more_pages_in_run: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ "–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            if channel_url in no_more_pages_counts:
                no_more_pages_counts[channel_url] += 1
            else:
                no_more_pages_counts[channel_url] = 1

            if no_more_pages_counts[channel_url] >= MAX_NO_MORE_PAGES_COUNT and channel_url not in channels_to_remove:
                channels_to_remove.append(channel_url)
                channel_removed_in_run = True # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–µ
                logging.info(f"–ö–∞–Ω–∞–ª '{channel_url}' –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞ {MAX_NO_MORE_PAGES_COUNT} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π '–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'. –ö–∞–Ω–∞–ª –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            elif no_more_pages_in_run and not channel_removed_in_run:
                 logging.info(f"–î–ª—è –∫–∞–Ω–∞–ª–∞ '{channel_url}' –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'. –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥: {no_more_pages_counts[channel_url]}/{MAX_NO_MORE_PAGES_COUNT}.")
            elif channel_removed_in_run:
                pass # –£–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤—ã—à–µ

        parsed_profiles.extend(channel_profiles)

    except Exception as channel_exception:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_url}: {channel_exception}")
    finally:
        thread_semaphore.release()

def clean_profile(profile_string):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤."""
    part = profile_string
    part = profile_string
    part = re.sub('%0A', '', part)
    part = re.sub('%250A', '', part)
    part = re.sub('%0D', '', part)
    part = requests.utils.unquote(requests.utils.unquote(part)).strip()
    part = re.sub(' ', '', part)
    part = re.sub(r'\x00', '', part)
    part = re.sub(r'\x01', '', part)
    part = re.sub('amp;', '', part)
    part = re.sub('ÔøΩ', '', part)
    part = re.sub('fp=(firefox|safari|edge|360|qq|ios|android|randomized|random)', 'fp=chrome', part, flags=re.IGNORECASE)
    return part

async def process_parsed_profiles(parsed_profiles_list):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: –æ—á–∏—Å—Ç–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º,
    —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ø–æ–¥—Å—Ç—Ä–æ–∫, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏, –∏—Ç–æ–≥–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        parsed_profiles_list (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏ –∏—Ö —Å–∫–æ—Ä–∞–º–∏ –∏ –¥–∞—Ç–∞–º–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (—Å–ª–æ–≤–∞—Ä–∏).
    """
    processed_profiles = []
    country_flag_emojis = await asyncio.gather(*(item['country_flag_emoji_task'] for item in parsed_profiles_list if 'country_flag_emoji_task' in item), return_exceptions=True) # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

    for index, item in enumerate(parsed_profiles_list):
        cleaned_profile_string = clean_profile(item['profile'])
        protocol = ""
        profile_to_add = None

        country_flag_emoji = None # Default value if no task or error
        if 'country_flag_emoji_task' in item:
            emoji_result = country_flag_emojis[index] # Get corresponding emoji result
            if isinstance(emoji_result, Exception): # Handle exceptions from tasks
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{item['profile'][:50]}...': {emoji_result}")
                country_flag_emoji = UNKNOWN_FLAG_EMOJI # Use unknown flag emoji on error
            else:
                country_flag_emoji = emoji_result
        else:
            country_flag_emoji = DEFAULT_FLAG_EMOJI # Default if no country task

        port_match = re.search(r":(\d+)", cleaned_profile_string) # Find port number
        port = port_match.group(1) if port_match else "unknown_port" # Extract port or use "unknown_port"

        if "vless://" in cleaned_profile_string:
            protocol = "vless"
            part = f'vless://{cleaned_profile_string.split("vless://")[1]}'
            if "flow=xtls-rprx-direct" not in part and "@" in part and ":" in part[8:]:
                profile_to_add = {'profile': part.strip(), 'score': item['score'], 'date': item['date'], 'country_flag_emoji': country_flag_emoji, 'profile_name': f"{protocol}-{port}-{country_flag_emoji}"} # Add flag emoji and profile name

        elif "hy2://" in cleaned_profile_string:
            protocol = "hy2"
            part = f'hy2://{cleaned_profile_string.split("hy2://")[1]}'
            if "@" in part and ":" in part[6:]:
                profile_to_add = {'profile': part.strip(), 'score': item['score'], 'date': item['date'], 'country_flag_emoji': country_flag_emoji, 'profile_name': f"{protocol}-{port}-{country_flag_emoji}"} # Add flag emoji and profile name

        elif "tuic://" in cleaned_profile_string:
            protocol = "tuic"
            part = f'tuic://{cleaned_profile_string.split("tuic://")[1]}'
            if ":" in part[7:] and "@" in part:
                profile_to_add = {'profile': part.strip(), 'score': item['score'], 'date': item['date'], 'country_flag_emoji': country_flag_emoji, 'profile_name': f"{protocol}-{port}-{country_flag_emoji}"} # Add flag emoji and profile name

        elif "trojan://" in cleaned_profile_string:
            protocol = "trojan"
            part = f'trojan://{cleaned_profile_string.split("trojan://")[1]}'
            if "@" in part and ":" in part[9:]:
                profile_to_add = {'profile': part.strip(), 'score': item['score'], 'date': item['date'], 'country_flag_emoji': country_flag_emoji, 'profile_name': f"{protocol}-{port}-{country_flag_emoji}"} # Add flag emoji and profile name

        if profile_to_add:
            processed_profiles.append(profile_to_add)

    logging.info(f'–ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏...')

    unique_profiles_scored = []
    seen_profiles = set()
    for profile_data in processed_profiles:
        profile = profile_data['profile']
        if profile not in seen_profiles and (len(profile)>13) and (("‚Ä¶" in profile and "#" in profile) or ("‚Ä¶" not in profile)):
            unique_profiles_scored.append(profile_data)
            seen_profiles.add(profile)

    new_processed_profiles_scored = []
    for profile_data in unique_profiles_scored:
        x = profile_data['profile']
        x = re.sub(r'‚Ä¶¬ª$|‚Ä¶$|¬ª$|%$|`$', '', x).strip()
        if x[-2:-1] == '%':
            x=x[:-2]
        new_processed_profiles_scored.append({'profile': x.strip(), 'score': profile_data['score'], 'date': profile_data['date'], 'country_flag_emoji': profile_data['country_flag_emoji'], 'profile_name': profile_data['profile_name']}) # Keep profile name and flag emoji

    processed_profiles_scored = new_processed_profiles_scored

    processed_profiles_strings = [item['profile'] for item in processed_profiles_scored]
    processed_profiles_strings = substring_del(processed_profiles_strings)

    final_profiles_scored = []
    profile_strings_set = set(processed_profiles_strings)
    for profile_data in processed_profiles_scored:
        if profile_data['profile'] in profile_strings_set:
            final_profiles_scored.append(profile_data)
            profile_strings_set.remove(profile_data['profile'])

    # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏ ---
    fresh_profiles_scored = []
    now = datetime.now(tz=timezone.utc) # Timezone aware current datetime
    for profile_data in final_profiles_scored:
        if 'date' in profile_data and isinstance(profile_data['date'], datetime):
            time_difference = now - profile_data['date']
            if time_difference <= timedelta(days=PROFILE_FRESHNESS_DAYS):
                fresh_profiles_scored.append(profile_data)
            else:
                logging.info(f"–£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø—Ä–æ—Ñ–∏–ª—å (—Å—Ç–∞—Ä—à–µ {PROFILE_FRESHNESS_DAYS} –¥–Ω–µ–π): –¥–∞—Ç–∞ {profile_data['date'].strftime('%Y-%m-%d %H:%M:%S UTC')}, –ø—Ä–æ—Ñ–∏–ª—å: {profile_data['profile'][:100]}...") # –õ–æ–≥ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        else:
            fresh_profiles_scored.append(profile_data) # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –±–µ–∑ –¥–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å) –∏ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ

    final_profiles_scored = fresh_profiles_scored
    logging.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(final_profiles_scored)} –ø—Ä–æ—Ñ–∏–ª–µ–π.") # –õ–æ–≥ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    final_profiles_scored.sort(key=lambda item: item['score'], reverse=True)
    return final_profiles_scored

def load_failure_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    history = json_load(FAILURE_HISTORY_FILE)
    return history if history else {}

def save_failure_history(history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–∞–π–ª."""
    return json_save(history, FAILURE_HISTORY_FILE)

def load_no_more_pages_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é '–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    history = json_load(NO_MORE_PAGES_HISTORY_FILE)
    return history if history else {}

def save_no_more_pages_history(history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é '–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–∞–π–ª."""
    return json_save(history, NO_MORE_PAGES_HISTORY_FILE)

def download_ip2location_db(db_url, db_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö IP2Location LITE DB1.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        db_url: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ZIP-–∞—Ä—Ö–∏–≤–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        db_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (BIN).
    """
    logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IP2Location...")
    try:
        response = requests.get(db_url, stream=True, timeout=30) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP

        zip_path = "ip2location_temp.zip" # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è ZIP –∞—Ä—Ö–∏–≤–∞
        with open(zip_path, "wb") as zip_file:
            for chunk in response.iter_content(chunk_size=8192): # –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º
                zip_file.write(chunk)

        with zipfile.ZipFile(zip_path, 'r') as zip_ref: # –û—Ç–∫—Ä—ã–≤–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            for filename in zip_ref.namelist(): # –ò—â–µ–º BIN —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø–æ–¥–ø–∞–ø–∫–µ)
                if filename.upper().endswith(".BIN"):
                    zip_ref.extract(filename, ".") # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    extracted_path = filename # –ü—É—Ç—å –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
                    os.rename(extracted_path, db_path) # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ db_path
                    break # –ù–∞—à–ª–∏ –∏ –∏–∑–≤–ª–µ–∫–ª–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            else: # for...else, –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –µ—Å–ª–∏ BIN —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ
                raise FileNotFoundError("BIN —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ZIP –∞—Ä—Ö–∏–≤–µ.")

        os.remove(zip_path) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª
        logging.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö IP2Location —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{db_path}'.")

    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IP2Location: {e}")
    except zipfile.BadZipFile:
        logging.error(f"–û—à–∏–±–∫–∞: –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IP2Location.")
        if os.path.exists(zip_path): # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π zip, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            os.remove(zip_path)
    except FileNotFoundError as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e: # –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IP2Location: {e}")


if __name__ == "__main__":
    if not os.path.exists(IP2LOCATION_DB_PATH): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IP2Location
        download_ip2location_db(IP2LOCATION_DB_URL, IP2LOCATION_DB_PATH) # –°–∫–∞—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç

    telegram_channel_names_original = json_load('telegram_channels.json') # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –µ–≥–æ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    if telegram_channel_names_original is None:
        logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ telegram_channels.json. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        exit(1)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    telegram_channel_names_original[:] = [x for x in telegram_channel_names_original if len(x) >= 5] # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤ –≤–∞–ª–∏–¥–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    telegram_channel_names_original = list(set(telegram_channel_names_original)) # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    telegram_channel_names_original.sort() # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã

    initial_channels_count = len(telegram_channel_names_original)
    logging.info(f'–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ telegram_channels.json: {initial_channels_count}')

    channel_failure_counts = load_failure_history() # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—É–¥–∞—á
    no_more_pages_counts = load_no_more_pages_history() # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ "–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    channels_to_remove = [] # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –ø—Ä–æ–≥–æ–Ω–µ

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª—è—Ç—å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    telegram_channel_names_to_parse = list(telegram_channel_names_original) # –†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–ø–∏–µ–π —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    channels_parsed_count = len(telegram_channel_names_to_parse)

    logging.info(f'–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...')
    start_time = datetime.now()

    thread_semaphore = threading.Semaphore(MAX_THREADS_PARSING)
    parsed_profiles = []
    channels_with_profiles = set()

    logging.info(f'–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {channels_parsed_count} —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ telegram_channels.json...')

    async def main(): # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main
        threads = []
        for channel_name in telegram_channel_names_to_parse: # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–æ–ø–∏–∏ —Å–ø–∏—Å–∫–∞
            thread = threading.Thread(target=lambda ch_name=channel_name: asyncio.run(process_channel(ch_name, parsed_profiles, thread_semaphore, telegram_channel_names_original, channels_parsed_count, channels_with_profiles, channel_failure_counts, channels_to_remove, no_more_pages_counts, IP2LOCATION_DB_PATH))) # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é process_channel –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()

        logging.info(f'–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω - {str(datetime.now() - start_time).split(".")[0]}')
        logging.info(f'–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤...')

        final_profiles_scored = await process_parsed_profiles(parsed_profiles) # process_parsed_profiles —Ç–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è

        num_profiles_to_save = min(max(len(final_profiles_scored), MIN_PROFILES_TO_DOWNLOAD), MAX_PROFILES_TO_DOWNLOAD)
        profiles_to_save = final_profiles_scored[:num_profiles_to_save]

        with open("config-tg.txt", "w", encoding="utf-8") as file:
            for profile_data in profiles_to_save:
                file.write(f"{profile_data['profile_name']} - {profile_data['profile'].encode('utf-8').decode('utf-8')}\n") # Save profile name and profile

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ telegram_channel_names_original –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        if channels_to_remove:
            logging.info(f"–£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª—ã: {channels_to_remove}")
            telegram_channel_names_updated = [chan for chan in telegram_channel_names_original if chan not in channels_to_remove]
            if telegram_channel_names_updated != telegram_channel_names_original: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                json_save(telegram_channel_names_updated, 'telegram_channels.json')
                logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ telegram_channels.json. –£–¥–∞–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels_to_remove)}.")
            else:
                logging.info("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ telegram_channels.json –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å).")
        else:
            logging.info("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

        save_failure_history(channel_failure_counts) # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—É–¥–∞—á
        save_no_more_pages_history(no_more_pages_counts) # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ "–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    asyncio.run(main()) # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main

    end_time = datetime.now()
    total_time = end_time - start_time

    logging.info(f'{"-"*40}')
    logging.info(f'{"--- –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---":^40}')
    logging.info(f'{"-"*40}')
    logging.info(f'–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(total_time).split(".")[0]}')
    logging.info(f'–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ telegram_channels.json: {initial_channels_count}')
    logging.info(f'–ö–∞–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {channels_parsed_count}')
    logging.info(f'–ö–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏: {len(channels_with_profiles)}')
    logging.info(f'–ü—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏): {len(parsed_profiles)}')
    logging.info(f'–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(final_profiles_scored)}') # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —É–∂–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏
    logging.info(f'–ü—Ä–æ—Ñ–∏–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ config-tg.txt: {len(profiles_to_save)}')
    if channels_to_remove:
        logging.info(f'–ö–∞–Ω–∞–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞: {len(channels_to_remove)}')
    else:
        logging.info(f'–ö–∞–Ω–∞–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞: 0')
    logging.info(f'{"-"*40}')
    logging.info('–ó–∞–≤–µ—Ä—à–µ–Ω–æ!')
